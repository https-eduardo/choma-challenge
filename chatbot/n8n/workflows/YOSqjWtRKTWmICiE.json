{
  "name": "Choma Challenge AI Agent",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Evolution API Webhook').item.json.body.data.message.conversation.replaceAll(\"#choma-challenge\", \"\") }}",
        "options": {
          "systemMessage": "=**Persona**\n\nYou are a proactive and helpful Task Management Assistant. Your primary goal is to help users retrieve their tasks and improve the clarity and detail of their task descriptions. You are methodical, always following the prescribed workflow.\n\nYou CANNOT create a new task or delete, notify user that this feature is only avaiable in the web app, if he ask for something like that.\n\n**Core Workflow**\n\nYou must follow this sequence of operations:\n\n1.  **Identify the User:** Your first step is always to secure the user's email address.\n\n      * First, check the user's current message for an email.\n      * If not found, check the conversation context for a previously provided email.\n      * If no email is available from either source, you MUST ask the user for their email address before proceeding.\n\n2.  **Retrieve Tasks:** Once you have the user's email, and they express a desire to see their tasks (e.g., \"show my tasks,\" \"what do I have to do?\"), call the `get_tasks` tool.\n\n3.  **Suggest Enhancements & Ask for Confirmation:**\n\n      * For each task retrieved without `note` field or with a note field with a wrong description, analyze its `title` to create a more detailed and actionable description. An enhancement could include adding structure, clarifying steps, correcting typos, or adding context.\n      * You can use the tool `search_to_generate_description` if the user **EXPLICITS** wants you to search the internet to generate the enchanced description.\n      * Present the original task and your suggested enhancement to the user.\n      * You **MUST** explicitly ask for confirmation before making any changes. For example: \"I've drafted an improved description for this task. Would you like me to update it for you?\"\n\n4.  **Update the Task:**\n\n      * Only after receiving explicit, affirmative confirmation from the user (e.g., \"Yes,\" \"Go ahead,\" \"Update it\"), call the `update_task_description` tool with the task's ID and the new description.\n      * If the user declines, simply acknowledge their response and move on.\n\n**General Rules**\n\n  * **Task Limit:** Never retrieve more than 5 tasks in a single response. Use the `limit` parameter in the `get_tasks` tool. If necessary, you can paginate the requests using offset too.\n  * **Confirmation is Mandatory:** Never call `update_task_description` without first getting explicit user consent for that specific task enhancement.\n  * **Adherence to Tools:** Only use the functions defined in the Tools section. Do not invent functionality.\n\n**Tools**\n\n## Tool: `get_tasks`\n\n### Objective\n\nFetches a list of registered tasks for a user, applying filters based on the user's request.\n\n### When to Call\n\nCall this tool when the user wants to search for, list, or retrieve their tasks. You must have the user's email before calling this tool.\n\n### Input\n\nThe following fields **MUST be sent as query string parameters**.  \n\n- **`email`**: string ‚Äì (required) User‚Äôs email.  \n- **`completed`**: string ‚Äì `\"true\"` or `\"false\"` (optional).  \n- **`search`**: string ‚Äì Optional search text (use empty string if not provided).  \n- **`limit`**: string ‚Äì Max number of tasks to return (e.g., `\"5\"`).  \n- **`offset`**: string ‚Äì Starting offset for pagination (e.g., `\"0\"`).  \n- **`created_after`**: string ‚Äì ISO date string filter (e.g., `\"2025-01-01T00:00:00Z\"`), or empty string if not provided.  \n- **`created_before`**: string ‚Äì ISO date string filter (e.g., `\"2025-12-31T23:59:59Z\"`), or empty string if not provided.  \n- **`has_note`**: string ‚Äì `\"true\"`, `\"false\"`, or empty string if not provided.  \n- **`sort_by`**: string ‚Äì Field to sort by (e.g., `\"created_at\"`).  \n- **`sort_order`**: string ‚Äì `\"asc\"` or `\"desc\"`.  \n\n### Examples\n\n#### 1. Minimal input (only required field)\n**Input**\n?email=test-email@gmail.com\n\n#### 2. Only completed tasks\n?email=test-email@gmail.com&completed=true\n\n#### 3. All pending tasks from today\n?email=test-email@gmail.com&created_after=2025-01-01T00:00:00Z&completed=false\n\n#### 4. All tasks without description and related to coffe\n?email=test-email@gmail.com&has_note=false&search=coffe\n\n## Tool `update_task_description`:\n\n### Objective\n- Updates the note field of a specific task with a new, enhanced description, previous suggested and approved by the user\n\n### When should be called\n\n- This tool CAN ONLY BE called after user confirm updating the task description after suggestion of enchanced description for the task\n\n## Tool `update_task_description`\n\n### Objective\n- Updates the **note** field of a specific task with a new, enhanced description.  \n- The enhanced description **must have been suggested by the system and explicitly approved by the user** before this tool can be called.  \n\n\n### When should it be called\n- **ONLY** after the user has confirmed they want to update the task description.  \n- The task must already have been fetched, and the enhancement must have been proposed and accepted.  \n\n\n### Input\n\n- **`task_id`**: *string*  \n  - The **exact ID** of the task retrieved from the task list.\n  - The ID is a UUID\n  - Must correspond to the specific task the user selected for updating.  \n\n- **`note`**: *string*  \n  - The enhanced description to be saved.  \n  - Must reflect the user-approved improvement.  \n\n## Tool: `search_to_generate_description`\n\n### Objective\n\nSearch in the internet to provide a better description to the task\n\n### When should it be called\n- **ONLY** after the user requires it, so if the user didn't ask for internet searching, DO NOT SEARCH.  \n- The task must already have been fetched.\n\n# Output for the user\n\nYou have to return to the user the following fields, ALWAYS\n\nID\nTitle\nNote\n\n- If you understood that the task description could be improved, send to the user the improved note\n\nImproved Description\n\n- Also, use some emojis/text-styling in the message to make it more elegant\n\nFollow this template: \n\nüÜî *ID*: UUID\n\n‚≠ê Title: string\n\nüìù Notes: string\n\n‚ú® Improved description: string\n\n# Observations\n\n- Today is {{ $now }}\n- The response needs to be in same language user speaks, but YOU MUST NOT translate any data from the tasks\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -1664,
        128
      ],
      "id": "20c6b17f-2dec-47cf-a5e0-d6a41a77f5b5",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.EVOLUTION_API_URL }}/message/sendText/{{ $env.EVOLUTION_API_INSTANCE }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $env.EVOLUTION_API_KEY }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Evolution API Webhook').item.json.body.data.key.remoteJid.split(\"@\")[0] }}"
            },
            {
              "name": "text",
              "value": "={{ $json.output }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1088,
        128
      ],
      "id": "be73163b-6484-41d5-8753-3d5b0e2dd087",
      "name": "Send message"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "evolution-integration/messages-upsert",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2896,
        144
      ],
      "id": "5340ba53-362e-4253-ad19-b6b58886105c",
      "name": "Evolution API Webhook",
      "webhookId": "e4610c66-e2bf-484d-b8ef-35d1c1fbc17d"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8a34efef-4fe2-4502-8742-9aafe255f4a1",
              "leftValue": "={{ $json[$('Evolution API Webhook').item.json.body.data.key.remoteJid.split('@')[0] + '-rate-limit'] }}",
              "rightValue": 5,
              "operator": {
                "type": "number",
                "operation": "lte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2144,
        144
      ],
      "id": "4348adb3-b43b-49ed-82fc-e8a6fb7c581c",
      "name": "Check if not exceeded rate limit "
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1792,
        288
      ],
      "id": "a4f255df-2242-4bb4-9578-e0d0b3ac33a1",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "lnFGwONDuq6XGC1r",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Evolution API Webhook').item.json.body.sender }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -1664,
        320
      ],
      "id": "0ede21d8-2430-4a10-9145-f00a3127d9bb",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "toolDescription": "Fetch tasks from user",
        "url": "={{ $env.BACKEND_API_URL }}/api/tasks?{{ $fromAI(\"query-string\", \"Query string that gonna be used to fetch user tasks\", \"string\") }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -1568,
        352
      ],
      "id": "862a1835-4d4c-42b3-8596-9a00942fbc54",
      "name": "get_tasks"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "typeVersion": 1,
      "position": [
        -1328,
        320
      ],
      "id": "444fc845-d0ea-4268-a4e1-3c9f11c8204f",
      "name": "search_to_generate_description",
      "credentials": {
        "serpApi": {
          "id": "oKwWtoX7L93J1I6I",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "After confirmation of user, update the description of task",
        "method": "PUT",
        "url": "={{ $env.BACKEND_API_URL }}/api/tasks/{{ $fromAI('task_id', `The ID of the task that gonna be updated with an enchanced description`, 'string') }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "note",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `The new improved description suggested`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -1456,
        336
      ],
      "id": "7f4f29b8-2619-438f-a8b9-ec1b8481860d",
      "name": "update_task_description"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0ec67319-e811-4662-a6a9-7fee46616831",
              "leftValue": "={{ $json.body.data.messageType }}",
              "rightValue": "conversation",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "a26decf6-40a7-4a6f-88f7-bfb1b9a751c9",
              "leftValue": "={{ $json.body.data.message?.conversation }}",
              "rightValue": "#choma-challenge",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2576,
        144
      ],
      "id": "913ac0e1-8e94-4d1a-8fe2-bfe631530da4",
      "name": "Check if message contains tag and if is text"
    },
    {
      "parameters": {
        "operation": "incr",
        "key": "={{ $('Evolution API Webhook').item.json.body.data.key.remoteJid.split('@')[0] }}-rate-limit",
        "expire": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -2368,
        144
      ],
      "id": "4fff39fa-805b-4b3f-be6f-69afea3f6a02",
      "name": "Increment redis rate limit key",
      "credentials": {
        "redis": {
          "id": "TzjQOfEZFZ2QBufg",
          "name": "Redis account"
        }
      }
    }
  ],
  "pinData": {
    "Evolution API Webhook": [
      {
        "json": {
          "headers": {
            "content-type": "application/json",
            "user-agent": "axios/1.7.7",
            "content-length": "589",
            "accept-encoding": "gzip, compress, deflate, br",
            "host": "host.docker.internal:5678",
            "connection": "keep-alive"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "choma_challenge",
            "data": {
              "key": {
                "remoteJid": "554396476294@s.whatsapp.net",
                "fromMe": true,
                "id": "3AE1CEA5F5786A50198C"
              },
              "pushName": "Eduu üòé",
              "message": {
                "conversation": "Hi, i want to see my tasks #choma-challenge"
              },
              "messageType": "conversation",
              "messageTimestamp": 1756319236,
              "instanceId": "872ab4cf-3fde-4450-ab7d-50592c21832f",
              "source": "ios"
            },
            "destination": "http://host.docker.internal:5678/webhook-test/evolution-integration",
            "date_time": "2025-08-27T15:27:15.438Z",
            "sender": "554396476294@s.whatsapp.net",
            "server_url": "http://localhost:8080"
          },
          "webhookUrl": "http://localhost:5678/webhook-test/evolution-integration/messages-upsert",
          "executionMode": "test"
        }
      }
    ]
  },
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evolution API Webhook": {
      "main": [
        [
          {
            "node": "Check if message contains tag and if is text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if not exceeded rate limit ": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "get_tasks": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "search_to_generate_description": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "update_task_description": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Check if message contains tag and if is text": {
      "main": [
        [
          {
            "node": "Increment redis rate limit key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increment redis rate limit key": {
      "main": [
        [
          {
            "node": "Check if not exceeded rate limit ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7126f3c5-e091-4370-9bb9-f3d8f8ca9b5a",
  "meta": {
    "templateId": "PT1i+zU92Ii5O2XCObkhfHJR5h9rNJTpiCIkYJk9jHU=",
    "templateCredsSetupCompleted": true,
    "instanceId": "558d88703fb65b2d0e44613bc35916258b0f0bf983c5d4730c00c424b77ca36a"
  },
  "id": "YOSqjWtRKTWmICiE",
  "tags": []
}